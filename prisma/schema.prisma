generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// --- Modelos ---

model User {
    id          Int          @id @unique @default(autoincrement())
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    categories  Category[]
    email       String       @unique
    items       Item[]
    lastName    String
    name        String
    orders      Order[]
    password    String
    permissions Permission[]
    roles       Role[]       @relation("userToRole")
    userToRole  UserToRole[]
}

model Item {
    id          Int         @id @unique @default(autoincrement())
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    categoryId  Int
    description String?
    name        String
    orders      OrderItem[]
    price       Float
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId      Int
}

model Order {
    id        Int         @id @unique @default(autoincrement())
    createdAt DateTime    @default(now())
    updatedAt DateTime    @default(now())
    items     OrderItem[]
    total     Float
    user      User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId    Int
}

model OrderItem {
    id        Int      @id @unique @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
    item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    itemId    Int
    order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    orderId   Int
    quantity  Int
    price     Float
    total     Float
}

model Role {
    id          Int          @id @unique @default(autoincrement())
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    name        String       @unique
    permissions Permission[]
    users       User[]       @relation("userToRole")
    userToRole  UserToRole[]
}

model Permission {
    id        Int      @id @unique @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    canRead   Boolean  @default(false)
    canWrite  Boolean  @default(false)
    entity    String
    role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade) // Cascade para eliminar permisos si se elimina el rol
    roleId    Int
    user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade) // Cascade para eliminar permisos si se elimina el usuario
    userId    Int?
}

model Category {
    id          Int      @id @unique @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    description String?
    items       Item[]
    name        String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId      Int
}

model UserToRole {
    id        Int      @id @unique @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
    role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    roleId    Int
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId    Int
}
